[{"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\index.js":"1","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\NotFoundScreen.jsx":"2","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\routes\\PrivateRoute.jsx":"3","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\routes\\PublicRoute.jsx":"4","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\LoginScreen.jsx":"5","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\Form.jsx":"6","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Navbar.jsx":"7","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\FormCheck.jsx":"8","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Button.jsx":"9","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\RegisterScreen.jsx":"10","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\utility\\config.js":"11","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Logo.jsx":"12","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\HomeScreen.jsx":"13","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Mnemonic.jsx":"14","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\UserScreen.jsx":"15","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\MnemonicScreen.jsx":"16","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\App.js":"17","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\FormNavigation.jsx":"18","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Navs.jsx":"19","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\Submit.jsx":"20","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Nothing.jsx":"21","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\ReportMnemonic.jsx":"22","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\MessageBox.jsx":"23","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\utility\\colors.js":"24","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\Editor.jsx":"25","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\ReportUser.jsx":"26","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\user.js":"27","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\mnemonic.js":"28","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\category.js":"29","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\me.js":"30","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\MeScreen.jsx":"31","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\reportWebVitals.js":"32","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Mnemonics.jsx":"33","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Loading.jsx":"34","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\GroupFormDropdown.jsx":"35","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\auth.js":"36","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\FormGroup.jsx":"37","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\report.js":"38"},{"size":690,"mtime":1611604493963,"results":"39","hashOfConfig":"40"},{"size":347,"mtime":1611955278519,"results":"41","hashOfConfig":"40"},{"size":578,"mtime":1613402449711,"results":"42","hashOfConfig":"40"},{"size":406,"mtime":1613402454886,"results":"43","hashOfConfig":"40"},{"size":2474,"mtime":1613502849921,"results":"44","hashOfConfig":"40"},{"size":571,"mtime":1612644755391,"results":"45","hashOfConfig":"40"},{"size":1400,"mtime":1613402444428,"results":"46","hashOfConfig":"40"},{"size":607,"mtime":1612796680077,"results":"47","hashOfConfig":"40"},{"size":822,"mtime":1612797017978,"results":"48","hashOfConfig":"40"},{"size":1907,"mtime":1612795465339,"results":"49","hashOfConfig":"40"},{"size":123,"mtime":1611579584982,"results":"50","hashOfConfig":"40"},{"size":304,"mtime":1612797117321,"results":"51","hashOfConfig":"40"},{"size":210,"mtime":1612472202178,"results":"52","hashOfConfig":"40"},{"size":2131,"mtime":1613402709545,"results":"53","hashOfConfig":"40"},{"size":1262,"mtime":1612035669930,"results":"54","hashOfConfig":"40"},{"size":666,"mtime":1611955170894,"results":"55","hashOfConfig":"40"},{"size":2926,"mtime":1613405911092,"results":"56","hashOfConfig":"40"},{"size":416,"mtime":1612795971248,"results":"57","hashOfConfig":"40"},{"size":562,"mtime":1611694443700,"results":"58","hashOfConfig":"40"},{"size":4575,"mtime":1612815007354,"results":"59","hashOfConfig":"40"},{"size":155,"mtime":1611660103138,"results":"60","hashOfConfig":"40"},{"size":1338,"mtime":1612811514797,"results":"61","hashOfConfig":"40"},{"size":1191,"mtime":1611694305402,"results":"62","hashOfConfig":"40"},{"size":247,"mtime":1611694572772,"results":"63","hashOfConfig":"40"},{"size":922,"mtime":1612302289726,"results":"64","hashOfConfig":"40"},{"size":1302,"mtime":1612811540593,"results":"65","hashOfConfig":"40"},{"size":354,"mtime":1612811459578,"results":"66","hashOfConfig":"40"},{"size":1354,"mtime":1612811447033,"results":"67","hashOfConfig":"40"},{"size":376,"mtime":1612342901645,"results":"68","hashOfConfig":"40"},{"size":863,"mtime":1613404655828,"results":"69","hashOfConfig":"40"},{"size":4404,"mtime":1613404655068,"results":"70","hashOfConfig":"40"},{"size":362,"mtime":1606146488980,"results":"71","hashOfConfig":"40"},{"size":3975,"mtime":1613402791514,"results":"72","hashOfConfig":"40"},{"size":156,"mtime":1612090959882,"results":"73","hashOfConfig":"40"},{"size":586,"mtime":1612795433643,"results":"74","hashOfConfig":"40"},{"size":1619,"mtime":1613503519119,"results":"75","hashOfConfig":"40"},{"size":409,"mtime":1612796542790,"results":"76","hashOfConfig":"40"},{"size":562,"mtime":1612811477059,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1547hz0",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\index.js",[],["172","173"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\NotFoundScreen.jsx",[],["174","175"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\routes\\PrivateRoute.jsx",[],["176","177"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\routes\\PublicRoute.jsx",[],["178","179"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\LoginScreen.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\Form.jsx",[],["180","181"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Navbar.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\FormCheck.jsx",[],["182","183"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Button.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\RegisterScreen.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\utility\\config.js",[],["184","185"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Logo.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\HomeScreen.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Mnemonic.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\UserScreen.jsx",["186"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { getUser } from \"../../api/user\";\r\nimport Mnemonics from \"../other/Mnemonics\";\r\nimport Navs from \"../other/Navs\";\r\n\r\nfunction User({ history, match }) {\r\n  const [user, setUser] = useState({});\r\n  const { url, params } = match;\r\n\r\n  const handleGetUser = async () => {\r\n    try {\r\n      const { data: user } = await getUser(params.id);\r\n      setUser(user);\r\n    } catch (error) {\r\n      console.error(error);\r\n      history.push(\"/notFound\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGetUser();\r\n  }, []);\r\n\r\n  const navs = () => {\r\n    return [\r\n      {\r\n        to: `${url}/posts`,\r\n        text: \"Posts\",\r\n      },\r\n      {\r\n        to: `/report-user/${params.id}`,\r\n        text: \"Report User\",\r\n      },\r\n    ];\r\n  };\r\n\r\n  const { fullname, username } = user;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Navs navs={navs()} />\r\n\r\n      <div>\r\n        <h1>{fullname}</h1>\r\n        <h5>@{username}</h5>\r\n      </div>\r\n\r\n      <Switch>\r\n        <Route\r\n          path=\"/user/:id/posts\"\r\n          render={() => <Mnemonics query={{ author: params.id }} />}\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\MnemonicScreen.jsx",["187"],"import React, { useEffect, useState } from \"react\";\r\nimport { getMnemonic } from \"../../api/mnemonic\";\r\nimport Mnemonic from \"../other/Mnemonic\";\r\n\r\nfunction MnemonicScreen({ history, match }) {\r\n  const [mnemonic, setMnemonic] = useState({});\r\n  const { params } = match;\r\n\r\n  const handleGetMnemonic = async () => {\r\n    try {\r\n      const { data: mnemonic } = await getMnemonic(params.id);\r\n      setMnemonic(mnemonic);\r\n    } catch (error) {\r\n      console.error(error);\r\n      history.push(\"/notFound\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGetMnemonic();\r\n  }, []);\r\n\r\n  return <Mnemonic mnemonic={mnemonic} />;\r\n}\r\n\r\nexport default MnemonicScreen;\r\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\App.js",["188","189"],"import { useEffect } from \"react\";\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport User from \"./components/screens/UserScreen\";\nimport Home from \"./components/screens/HomeScreen\";\nimport Login from \"./components/screens/LoginScreen\";\nimport Register from \"./components/screens/RegisterScreen\";\nimport MnemonicScreen from \"./components/screens/MnemonicScreen\";\nimport NotFound from \"./components/screens/NotFoundScreen\";\nimport Submit from \"./components/screens/Submit\";\nimport ReportUser from \"./components/screens/ReportUser\";\nimport ReportMnemonic from \"./components/screens/ReportMnemonic\";\nimport PrivateRoute from \"./components/routes/PrivateRoute\";\nimport PublicRoute from \"./components/routes/PublicRoute\";\nimport Navbar from \"./components/other/Navbar\";\nimport axios from \"axios\";\nimport { isStillAuthenticated } from \"./api/auth\";\nimport MeScreen from \"./components/screens/MeScreen\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App({ history, location }) {\n  const toastConfig = {\n    position: \"top-center\",\n    autoClose: 5000,\n    hideProgressBar: true,\n    draggable: false,\n  };\n\n  const axiosSuccess = (response) => {\n    if (response.data.message)\n      toast.success(response.data.message, toastConfig);\n\n    return response;\n  };\n  const axiosError = (error) => {\n    if (error.response) {\n      if (error.response.status === 401) {\n        localStorage.removeItem(\"meId\");\n        history.push(\"/login\");\n      }\n      toast.error(error.response.data.error, toastConfig);\n    } else toast.error(\"Network error\", toastConfig);\n\n    return Promise.reject(error);\n  };\n\n  axios.defaults.withCredentials = true;\n  axios.interceptors.response.use(axiosSuccess, axiosError);\n\n  useEffect(() => {\n    if (location && location.state) {\n      const { message } = location.state;\n      if (message) toast.info(message.value, toastConfig);\n    }\n  }, [location]);\n\n  return (\n    <>\n      <ToastContainer />\n\n      <Navbar />\n      <div className=\"content\">\n        <Switch>\n          <PublicRoute path=\"/login\" component={Login} />\n          <PublicRoute path=\"/register\" component={Register} />\n          <PrivateRoute path=\"/me\" component={MeScreen} />\n          <Route path=\"/user/:id\" component={User} />\n          <PrivateRoute path=\"/submit\" component={Submit} />\n          <PrivateRoute path=\"/edit/:id\" component={Submit} />\n          <PrivateRoute path=\"/report-user/:id\" component={ReportUser} />\n          <PrivateRoute\n            path=\"/report-mnemonic/:id\"\n            component={ReportMnemonic}\n          />\n          <Route path=\"/:name/:id\" component={MnemonicScreen} />\n          <Route path=\"/notFound\" component={NotFound} />\n          <Route path=\"/\" component={Home} exact />\n          <Redirect to=\"/notFound\" />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default withRouter(App);\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\FormNavigation.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Navs.jsx",[],["190","191"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\Submit.jsx",["192"],"import React, { useEffect, useState } from \"react\";\r\nimport Form from \"../forms/Form\";\r\nimport FormGroup from \"../forms/FormGroup\";\r\nimport Button from \"../other/Button\";\r\nimport Editor from \"../forms/Editor\";\r\nimport { getCategories } from \"../../api/category\";\r\nimport {\r\n  createMnemonic,\r\n  deleteMnemonic,\r\n  getMnemonic,\r\n  updateMnemonic,\r\n} from \"../../api/mnemonic\";\r\nimport GroupFormDropdown from \"../forms/GroupFormDropdown\";\r\nimport MessageBox from \"../other/MessageBox\";\r\n\r\nfunction Submit({ match, history }) {\r\n  const [isMessageBox, setIsMessageBox] = useState(false);\r\n\r\n  const [operation, setOperation] = useState(\"create\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedCategories, setSelectedCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setOperation(\"edit\");\r\n      handleGet();\r\n    }\r\n  }, []);\r\n\r\n  const handleGet = async () => {\r\n    try {\r\n      const {\r\n        data: { title, content, categories },\r\n      } = await getMnemonic(match.params.id);\r\n      setTitle(title);\r\n      setContent(content);\r\n      setSelectedCategories(categories);\r\n    } catch (error) {\r\n      console.log(error);\r\n      history.push(\"/notFound\");\r\n    }\r\n  };\r\n\r\n  const handleGetCategories = async (searched) => {\r\n    setCategory(searched);\r\n    const selectedCategoriesIds = selectedCategories.map((category) => {\r\n      return category._id;\r\n    });\r\n\r\n    try {\r\n      const { data } = await getCategories({\r\n        text: searched,\r\n        exclude: selectedCategoriesIds,\r\n      });\r\n      setCategories(data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const selectCategory = (item) => {\r\n    const selected = [...selectedCategories, item];\r\n    setSelectedCategories(selected);\r\n\r\n    const newCategories = categories.filter(\r\n      (category) => category._id !== item._id\r\n    );\r\n    setCategories(newCategories);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const categoriesIds = selectedCategories.map((category) => category._id);\r\n    let value;\r\n    if (operation === \"create\") {\r\n      await createMnemonic({ title, content, categories: categoriesIds });\r\n      value = \"created\";\r\n    } else {\r\n      await updateMnemonic({\r\n        _id: match.params.id,\r\n        title,\r\n        content,\r\n        categories: categoriesIds,\r\n      });\r\n      value = \"edited\";\r\n    }\r\n    history.push({\r\n      pathname: \"/\",\r\n      state: {\r\n        message: {\r\n          value: `Your mnemonic has been ${value} successfully. We will notify you once it is publlished.`,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await deleteMnemonic(match.params.id);\r\n      history.push({\r\n        pathname: \"/\",\r\n        state: {\r\n          message: {\r\n            value: \"Your mnemonic has been deleted successfully\",\r\n          },\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error.response.data.error);\r\n    } finally {\r\n      setIsMessageBox(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <MessageBox\r\n        visible={isMessageBox}\r\n        onClose={() => setIsMessageBox(false)}\r\n        title=\"Are you sure you want to delete this mnemonic?\"\r\n        buttons={[\r\n          {\r\n            text: \"No\",\r\n            bgColor: \"primary\",\r\n            onClick: () => setIsMessageBox(false),\r\n          },\r\n          {\r\n            text: \"Yes\",\r\n            bgColor: \"danger\",\r\n            onClick: () => handleDelete(),\r\n          },\r\n        ]}\r\n      />\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormGroup\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n\r\n        <Editor label=\"Content\" value={content} onChange={setContent} />\r\n\r\n        <br />\r\n\r\n        <GroupFormDropdown\r\n          type=\"text\"\r\n          label=\"Categories\"\r\n          value={category}\r\n          items={categories}\r\n          onChange={(e) => handleGetCategories(e.target.value)}\r\n          onSelect={selectCategory}\r\n          selected={selectedCategories}\r\n        />\r\n\r\n        <br />\r\n        <Button type=\"submit\">{operation}</Button>\r\n        {operation === \"edit\" && (\r\n          <Button bgColor=\"danger\" onClick={() => setIsMessageBox(true)}>\r\n            Delete\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Submit;\r\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Nothing.jsx",[],["193","194"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\ReportMnemonic.jsx",["195"],"import React, { useEffect, useState } from \"react\";\r\nimport { getMnemonic } from \"../../api/mnemonic\";\r\nimport { reportMnemonic } from \"../../api/report\";\r\nimport Form from \"../forms/Form\";\r\nimport FormGroup from \"../forms/FormGroup\";\r\nimport Button from \"../other/Button\";\r\n\r\nfunction ReportMnemonic({ history, match, location }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const { params } = match;\r\n\r\n  const handleGetMnemonic = async () => {\r\n    try {\r\n      await getMnemonic(params.id);\r\n    } catch (error) {\r\n      console.error(error);\r\n      history.push(\"/notFound\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGetMnemonic();\r\n  }, []);\r\n\r\n  const handleReport = async () => {\r\n    await reportMnemonic({ _id: params.id, title, content });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleReport} location={location}>\r\n        <FormGroup\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <FormGroup\r\n          type=\"text\"\r\n          label=\"Content\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        />\r\n        <Button type=\"submit\">Report</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReportMnemonic;\r\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\MessageBox.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\utility\\colors.js",[],["196","197"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\Editor.jsx",[],["198","199"],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\ReportUser.jsx",["200"],"import React, { useEffect, useState } from \"react\";\r\nimport { getUser } from \"../../api/user\";\r\nimport { reportUser } from \"../../api/report\";\r\nimport Form from \"../forms/Form\";\r\nimport FormGroup from \"../forms/FormGroup\";\r\nimport Button from \"../other/Button\";\r\n\r\nfunction ReportUser({ history, match, location }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const { params } = match;\r\n\r\n  const handleGetUser = async () => {\r\n    try {\r\n      await getUser(params.id);\r\n    } catch (error) {\r\n      console.error(error);\r\n      history.push(\"/notFound\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGetUser();\r\n  }, []);\r\n\r\n  const handleReport = async () => {\r\n    await reportUser({ _id: params.id, title, content });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleReport} location={location}>\r\n        <FormGroup\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <FormGroup\r\n          type=\"text\"\r\n          label=\"Content\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        />\r\n        <Button type=\"submit\">Report</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReportUser;\r\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\user.js",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\mnemonic.js",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\category.js",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\me.js",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\screens\\MeScreen.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\reportWebVitals.js",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Mnemonics.jsx",["201","202"],"import React, { useEffect, useState } from \"react\";\r\nimport { getMyId } from \"../../api/me\";\r\nimport { getMnemonics, likeMnemonic } from \"../../api/mnemonic\";\r\nimport Button from \"./Button\";\r\nimport Mnemonic from \"./Mnemonic\";\r\nimport Nothing from \"./Nothing\";\r\nimport Loading from \"./Loading\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { parse, stringify } from \"query-string\";\r\nimport generateUrl from \"generate-url\";\r\nimport \"../../assets/css/searchform.css\";\r\n\r\nfunction Mnemonics({ query }) {\r\n  const [mnemonics, setMnemonics] = useState([]);\r\n  const [reachEnd, setReachEnd] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [value, setValue] = useState(\"\");\r\n  const [filter, setFilter] = useState({});\r\n\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const handleGet = async () => {\r\n    const finalQuery = { ...query, ...filter };\r\n    const { search, load } = filter;\r\n\r\n    if (!load) {\r\n      setReachEnd(false);\r\n      setMnemonics([]);\r\n    }\r\n    setLoading(true);\r\n\r\n    try {\r\n      const { data } = await getMnemonics(finalQuery);\r\n      if (!load) setMnemonics(data);\r\n      else setMnemonics([...mnemonics, ...data]);\r\n\r\n      history.push(\r\n        `?${stringify({\r\n          search: search !== \"\" ? generateUrl(search) : undefined,\r\n        })}`\r\n      );\r\n\r\n      if (data.length === 0) setReachEnd(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setReachEnd(true);\r\n    } finally {\r\n      setLoading(false);\r\n      if (load) window.scrollTo(0, document.body.scrollHeight);\r\n    }\r\n  };\r\n\r\n  const loadMore = () => {\r\n    const { page: currentPage } = filter;\r\n    const newFilter = { ...filter, page: currentPage + 1, load: true };\r\n    setFilter(newFilter);\r\n  };\r\n\r\n  const userId = getMyId();\r\n\r\n  useEffect(() => {\r\n    if (\"search\" in filter) {\r\n      setValue(filter.search);\r\n      handleGet();\r\n    }\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    let { search = \"\", page = 1 } = parse(location.search) || {};\r\n    setFilter({ search, page: parseInt(page), load: false });\r\n  }, []);\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    const newFilter = { search: value, page: 1, load: false };\r\n    setFilter(newFilter);\r\n  };\r\n\r\n  const revertSearch = () => {\r\n    const newFilter = { search: \"\", page: 1, load: false };\r\n    setFilter(newFilter);\r\n  };\r\n\r\n  const handleLike = async (_id) => {\r\n    // UI\r\n    let newMnemonics = [...mnemonics];\r\n    let mnemonicLikes = newMnemonics.find((m) => m._id === _id).likes;\r\n\r\n    if (!mnemonicLikes.includes(userId)) mnemonicLikes.push(userId);\r\n    else\r\n      newMnemonics.find((m) => m._id === _id).likes = newMnemonics\r\n        .find((m) => m._id === _id)\r\n        .likes.filter((l) => l !== userId);\r\n\r\n    setMnemonics(newMnemonics);\r\n\r\n    try {\r\n      // change in db\r\n      await likeMnemonic(_id);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSearch} className=\"searchform\">\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n        />\r\n        <i className=\"icon ri-search-line\"></i>\r\n        {value && (\r\n          <button onClick={revertSearch} type=\"button\">\r\n            close\r\n          </button>\r\n        )}\r\n      </form>\r\n\r\n      {mnemonics.length > 0 && (\r\n        <>\r\n          {mnemonics.map((mnemonic, index) => (\r\n            <Mnemonic key={index} mnemonic={mnemonic} onLike={handleLike} />\r\n          ))}\r\n        </>\r\n      )}\r\n      {mnemonics.length === 0 && !loading && <Nothing model=\"mnemonic\" />}\r\n\r\n      <Loading loading={loading} />\r\n\r\n      {!loading && !reachEnd && (\r\n        <div className=\"text-center mt-5 mb-5\">\r\n          <Button onClick={loadMore}>Load More</Button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Mnemonics;\r\n","G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\other\\Loading.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\GroupFormDropdown.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\auth.js",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\components\\forms\\FormGroup.jsx",[],"G:\\Portfolio\\mnemonicpedia\\frontend\\src\\api\\report.js",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"203","replacedBy":"207"},{"ruleId":"205","replacedBy":"208"},{"ruleId":"203","replacedBy":"209"},{"ruleId":"205","replacedBy":"210"},{"ruleId":"203","replacedBy":"211"},{"ruleId":"205","replacedBy":"212"},{"ruleId":"203","replacedBy":"213"},{"ruleId":"205","replacedBy":"214"},{"ruleId":"203","replacedBy":"215"},{"ruleId":"205","replacedBy":"216"},{"ruleId":"203","replacedBy":"217"},{"ruleId":"205","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":23,"column":6,"nodeType":"221","endLine":23,"endColumn":8,"suggestions":"222"},{"ruleId":"219","severity":1,"message":"223","line":21,"column":6,"nodeType":"221","endLine":21,"endColumn":8,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":16,"column":10,"nodeType":"227","messageId":"228","endLine":16,"endColumn":30},{"ruleId":"219","severity":1,"message":"229","line":55,"column":6,"nodeType":"221","endLine":55,"endColumn":16,"suggestions":"230"},{"ruleId":"203","replacedBy":"231"},{"ruleId":"205","replacedBy":"232"},{"ruleId":"219","severity":1,"message":"233","line":31,"column":6,"nodeType":"221","endLine":31,"endColumn":8,"suggestions":"234"},{"ruleId":"203","replacedBy":"235"},{"ruleId":"205","replacedBy":"236"},{"ruleId":"219","severity":1,"message":"223","line":24,"column":6,"nodeType":"221","endLine":24,"endColumn":8,"suggestions":"237"},{"ruleId":"203","replacedBy":"238"},{"ruleId":"205","replacedBy":"239"},{"ruleId":"203","replacedBy":"240"},{"ruleId":"205","replacedBy":"241"},{"ruleId":"219","severity":1,"message":"220","line":24,"column":6,"nodeType":"221","endLine":24,"endColumn":8,"suggestions":"242"},{"ruleId":"219","severity":1,"message":"243","line":67,"column":6,"nodeType":"221","endLine":67,"endColumn":14,"suggestions":"244"},{"ruleId":"219","severity":1,"message":"245","line":72,"column":6,"nodeType":"221","endLine":72,"endColumn":8,"suggestions":"246"},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],["247"],["248"],["247"],["248"],["247"],["248"],["247"],["248"],["247"],["248"],["247"],["248"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetUser'. Either include it or remove the dependency array.","ArrayExpression",["249"],"React Hook useEffect has a missing dependency: 'handleGetMnemonic'. Either include it or remove the dependency array.",["250"],"no-unused-vars","'isStillAuthenticated' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'toastConfig'. Either include it or remove the dependency array.",["251"],["247"],["248"],"React Hook useEffect has missing dependencies: 'handleGet' and 'match.params.id'. Either include them or remove the dependency array.",["252"],["247"],["248"],["253"],["247"],["248"],["247"],["248"],["254"],"React Hook useEffect has a missing dependency: 'handleGet'. Either include it or remove the dependency array.",["255"],"React Hook useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.",["256"],"no-global-assign","no-unsafe-negation",{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"259","fix":"265"},{"desc":"257","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [handleGetUser]",{"range":"271","text":"272"},"Update the dependencies array to be: [handleGetMnemonic]",{"range":"273","text":"274"},"Update the dependencies array to be: [location, toastConfig]",{"range":"275","text":"276"},"Update the dependencies array to be: [handleGet, match.params.id]",{"range":"277","text":"278"},{"range":"279","text":"274"},{"range":"280","text":"272"},"Update the dependencies array to be: [filter, handleGet]",{"range":"281","text":"282"},"Update the dependencies array to be: [location.search]",{"range":"283","text":"284"},[620,622],"[handleGetUser]",[577,579],"[handleGetMnemonic]",[1961,1971],"[location, toastConfig]",[1018,1020],"[handleGet, match.params.id]",[699,701],[671,673],[1938,1946],"[filter, handleGet]",[2108,2110],"[location.search]"]